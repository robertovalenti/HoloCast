{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../src/graphql/resolvers.ts"],"names":[],"mappings":"AAGA,SAAS,kBAAkB,CAAC,IAAY;IACtC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACnB,CAAC;AAED,SAAS,YAAY,CAAC,IAAyC;IAC7D,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAED,kCAAkC;AAElC,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,YAA0B,EAC1B,MAAc,EACd,QAAQ,GAAG,iBAAiB,EACjB,EAAE,CAAC,CAAC;IACf,KAAK,EAAE;QACL,KAAK,CAAC,iBAAiB;YACrB,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC;gBACzC,GAAG,EAAE,IAAW;gBAChB,OAAO,EAAE,MAAM;gBACf,SAAS,EAAE,QAAQ;gBACnB,OAAO,EAAE,yBAAyB;gBAClC,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;aACtB,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC;gBACjC,EAAE,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1B,GAAG,KAAK,CAAC,CAAC,CAAC;aACZ,CAAC,CAAC,CAAC;QACN,CAAC;KACF;IACD,QAAQ,EAAE;QACR,KAAK,CAAC,mBAAmB,CACvB,CAAC,EACD,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE;YAEjD,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC;gBAC1C,GAAG,EAAE,IAAW;gBAChB,OAAO,EAAE,MAAM;gBACf,SAAS,EAAE,QAAQ;gBACnB,OAAO,EAAE,uBAAuB;gBAChC,OAAO,EAAE;oBACP,KAAK;oBACL,UAAU,EAAE,kBAAkB,CAAC,SAAS,CAAC;oBACzC,QAAQ,EAAE,kBAAkB,CAAC,OAAO,CAAC;oBACrC,QAAQ;oBACR,QAAQ;iBACT;gBACD,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;aACtB,CAAC,CAAC;YAEH,OAAO;gBACL,EAAE,EAAE,YAAY,CAAC,OAAO,CAAC;gBACzB,SAAS,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAClC,KAAK;gBACL,SAAS;gBACT,OAAO;gBACP,QAAQ;gBACR,QAAQ;aACT,CAAC;QACJ,CAAC;KACF;CACF,CAAC,CAAC","sourcesContent":["import { Resolvers } from '@apollo/client/core';\nimport { AppWebsocket, CellId } from '@holochain/conductor-api';\n\nfunction secondsToTimestamp(secs: number) {\n  return [secs, 0];\n}\n\nfunction hashToString(hash: { hash: Buffer; hash_type: Buffer }) {\n  return hash.hash_type.toString('hex') + hash.hash.toString('hex');\n}\n\n// TODO: define your own resolvers\n\nexport const calendarEventsResolvers = (\n  appWebsocket: AppWebsocket,\n  cellId: CellId,\n  zomeName = 'calendar_events'\n): Resolvers => ({\n  Query: {\n    async allCalendarEvents() {\n      const events = await appWebsocket.callZome({\n        cap: null as any,\n        cell_id: cellId,\n        zome_name: zomeName,\n        fn_name: 'get_all_calendar_events',\n        payload: null,\n        provenance: cellId[1],\n      });\n\n      return events.map((event: any) => ({\n        id: hashToString(event[0]),\n        ...event[1],\n      }));\n    },\n  },\n  Mutation: {\n    async createCalendarEvent(\n      _,\n      { title, startTime, endTime, location, invitees }\n    ) {\n      const eventId = await appWebsocket.callZome({\n        cap: null as any,\n        cell_id: cellId,\n        zome_name: zomeName,\n        fn_name: 'create_calendar_event',\n        payload: {\n          title,\n          start_time: secondsToTimestamp(startTime),\n          end_time: secondsToTimestamp(endTime),\n          location,\n          invitees,\n        },\n        provenance: cellId[1],\n      });\n\n      return {\n        id: hashToString(eventId),\n        createdBy: hashToString(cellId[1]),\n        title,\n        startTime,\n        endTime,\n        invitees,\n        location,\n      };\n    },\n  },\n});\n"]}